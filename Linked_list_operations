//program: linked list operations
#include <iostream>
#include <cstdlib>

using namespace std;

struct node
{
	int data;
	struct node *next;
};

void print(struct node *n )
{

	while (n!=NULL)
	{
		cout <<n->data;
		n=n->next;
	}
}

void pushbefore (struct node ** head, int val)
{
	struct node * newnode = (struct node *) malloc (sizeof(struct node));
	newnode->data=val;
	newnode->next = *head;
	*head = newnode;
}
void pushafter(struct node * head, int val)
{
	struct node * newnode = (struct node *) malloc (sizeof(struct node));
	newnode->data=val;
	newnode->next= NULL;
	while (head->next!=NULL)
	{
		head = head->next;
	}
	head->next = newnode;
}

void pushbetween(struct node **prev, int val)
{
	struct node * newnode = (struct node *) malloc (sizeof(struct node));
	newnode->data = val;
	struct node *pre = *prev;
	newnode->next = pre->next;
	pre->next = newnode;
}
int getelement(struct node * head, int index)
{
	int i=0;
	struct node * newnode = (struct node *) malloc (sizeof(struct node));
	newnode = head;
	while (i!=index)
	{
		newnode = newnode->next;
		i++;
	}
	return newnode->data;
}
//delete the node
void deletenode(struct node * newnode)
{
	struct node * temp ;
	temp = newnode->next;
	newnode->data = temp->data;
	newnode->next = temp->next;
	free(temp);
}

//print mid of the link
int printmiddle (struct node ** head)
{
	int count =0;
	struct node * temp = *head;
	while (temp->next!=NULL)
	{
		temp = temp->next;
		count ++;
	}
	temp = * head;
	int i=0;
	while (i!=(count+1)/2)
	{
		temp = temp->next;
		i++;
	}
	return temp->data;
}

//nth element from end
int returnnth(struct node ** head, int n)
{
	struct node* temp = *head;
	int count =0;
	while (temp->next!=NULL)
	{
		temp = temp->next;
		count++;
	}
	temp = *head;
	int i=0;
	while (i!=(count-n)+1)
	{
		 temp=temp->next ;
		i++;
	}
	return temp->data;
}
//delete the list
void deletenode (struct node ** head )
{
	struct node * current = *head;
	struct node * next ;
	while (current != NULL)
	{
		next = current->next;
		free(current);
		current = next;
	}
	*head = NULL;
}

//count the repetitions of an integer
void countint(struct node ** head, int val)
{
	struct node * point = * head;
	int count=0;
	while(point!=NULL)
	{
		if(point->data==val)
		{
			count++;
		}
		point = point->next;
	}
	cout<< "\n"<<count;
}

//reverse the string
void reverse (struct node ** head)
{
	struct node * current = *head;
	struct node * prev = NULL;
	struct node * next = NULL;
	while (current != NULL)
	{
		next = current->next;
		current->next = prev;
		prev = current;
		current = next;
	}
	*head = prev;
}
int main() {
	struct node *head=NULL;
	struct node *second=NULL;
	struct node *third=NULL;
	head = (struct node *)malloc (sizeof(struct node ));
	second = (struct node *)malloc (sizeof(struct node ));
	third = (struct node *)malloc (sizeof(struct node ));
	head->data = 1;
	head->next = second;
	second->data=2;
	second->next=third;
	third->data=3;
	third->next=NULL;
	pushbefore(&head,2);
	pushafter(head,4);
	pushbetween(&head,4);
	pushbetween(&head,5);
	pushbetween(&head,6);
	print(head);
	int i = getelement(head, 3);
	cout << "\n" << i<<"\n";
	deletenode(head);
	print(head);
	cout << "\n the middle element is :";
	int i = printmiddle(&head);
	cout <<i<<"\n";
	int j =returnnth(&head, 3);
	cout<<"element at position"<< 3 << "from end is : " <<j;
	//deletenode(&head); // deletes  the list
	print (head);
	countint(&head, 4); // count of arbitrary integer in the list
	countint(&head, 3);
	reverse(&head);
	cout <<"reverse of the linked list is: \n";
	print(head);
	return 0;
}
